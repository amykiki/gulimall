server:
  port: 17000
  forward-headers-strategy: native # 使用了反向代理的情况下，内嵌tomcat要读取真正的请求header才能保证跳转正确
  servlet:
    session:
      cookie:
        name: GM-ORDER-SESSIONID

spring:
  datasource:
    url: jdbc:mysql://docker-serv:3306/gulimall_oms?useUnicode=true&characterEncoding=UTF-8&useSSL=false&serverTimezone=Asia/Shanghai
    driver-class-name: com.mysql.cj.jdbc.Driver
    username: root
    password: abc123
  cloud:
    nacos:
      discovery:
        server-addr: docker-serv:8848
  redis:
    host: docker-serv
    port: 6379
    password: abc123
    database: 5
  # 关闭thymeleaf缓存
  thymeleaf:
    cache: false
  session:
    store-type: redis
  rabbitmq:
    host: docker-serv
    port: 5672
    username: root
    password: 123123
    virtual-host: /
    publisher-confirm-type: correlated  #CORRELATED值是发布消息成功到交换器后会触发回调方法，如果是cluster模式，需要所有broker都接收到才会调用confirmCallback
    # 开启发送端消息抵达队列的确认
    publisher-returns: true
    template:
      # 指定消息在没有被队列接收时是否强行退回还是直接丢弃
      mandatory: true
    listener:
      simple:
        acknowledge-mode: manual # 手动确认
#   publisher-confirms: true
#   在springboot2.2.0.RELEASE版本之前是amqp正式支持的属性，用来配置消息发送到交换器之后是否触发回调方法，
#   在2.2.0及之后该属性过期使用spring.rabbitmq.publisher-confirm-type属性配置代替，用来配置更多的确认类型；
#   参考 https://blog.csdn.net/z69183787/article/details/109371628

mybatis-plus:
  mapper-locations: classpath:/mapper/**/*.xml
  global-config:
    db-config:
      id-type: auto # id自增

gulimall:
  feign:
    member: gulimall-member
    product: gulimall-product
    ware: gulimall-ware
  #自定义线程池参数
  threadpool:
    core-size: 10
    max-size: 30
    max-queue: 150
    keepalive-time: 20 # 最大等待时间，单位为秒
  # 单点登录登出配置
  sso:
    auth-server: http://auth.gulimall.com
    request-matchers: /**
    auth-request-matchers: /**
    logout-url: /user/logout
  order:
    mq:
      order-event-exchange: order-event-exchange
      order-delay-queue: order.delay.queue
      order-create-order-routing-key: order.create.order
      order-release-order-queue: order.release.order.queue
      order-release-order-routing-key: order.release.order
      stock-release-stock-queue: stock.release.stock.queue
      stock-release-stock-routing-key: order.release.other.#


security:
  oauth2:
    #OAuth2 Client配置，对应OAuth2ClientProperties类
    client:
      client-id: gulimall-order
      client-secret: abc123
      user-authorization-uri: ${gulimall.sso.auth-server}/oauth/authorize # 获取用户的授权码地址
      access-token-uri: ${gulimall.sso.auth-server}/oauth/token # 获取访问令牌的地址
      use-current-uri: false
      pre-established-redirect-uri: http://order.gulimall.com/user/login
    # OAuth2 Resource 配置，对应 ResourceServerProperties 类
    resource:
      token-info-uri: ${gulimall.sso.auth-server}/oauth/check_token # 校验访问令牌是否有效的地址

    sso:
      login-path: /user/login  #自定义登录url

## seata配置
seata:
  enabled: true
  application-id: ${spring.application.name}
  tx-service-group: gulimall-order-group
  service:
    # 虚拟组和实际分组映射
    vgroup-mapping:
      gulimall-order-group: default
    # 分组和seata服务的映射
    grouplist:
      default: 127.0.0.1:8091


logging:
  level:
    daily.boot.gulimall.order: debug
